#!/bin/bash

set -e

# Status helper function
status() {
    if [ $? -eq 0 ]; then
        echo "‚úÖ $1"
    else
        echo "‚ùå $1"
        return 1
    fi
}

echo "Running pre-commit hook: Grammar checking with ltex-ls-plus..."

# Check if ltex-ls-plus is available
if ! command -v ltex-ls-plus &> /dev/null; then
    echo "‚ùå ltex-ls-plus command not found. Please install it first."
    exit 1
fi

# Get list of tracked prose files, excluding .vale directory
FILES=$(git ls-files --cached --exclude-standard | grep -E '\.(md|txt|rst|adoc|asciidoc)$' | grep -v '^\.vale/')

if [ -z "$FILES" ]; then
    echo "üì≠ No prose files found to check grammar."
    exit 0
fi

# Count files for progress
TOTAL_FILES=$(echo "$FILES" | wc -l | tr -d ' ')
echo "üìù Found $TOTAL_FILES prose files to check for grammar"

# Create temporary directory for ltex-ls
TEMP_DIR=$(mktemp -d)
trap "rm -rf $TEMP_DIR" EXIT

# ltex-ls-plus configuration for grammar checking only
cat > "$TEMP_DIR/ltex-ls-plus-config.json" << 'EOF'
{
  "ltex": {
    "enabled": ["markdown", "plaintext"],
    "language": "en-US",
    "checkFrequency": "save",
    "clearDiagnosticsWhenClosingFile": true,
    "statusBarItem": false,
    "trace": { "server": "off" },
    "java": { "path": "", "initialHeapSize": 64, "maximumHeapSize": 512 },
    "sentenceCacheSize": 2000,
    "completionEnabled": false,
    "diagnosticSeverity": "information",
    "checkingStartDelay": 100,
    "additionalRules": {
      "enablePickyRules": true,
      "motherTongue": ""
    },
    "disabledRules": {
      "en-US": [
        "PASSIVE_VOICE",
        "OXFORD_SPELLING_Z_NOT_S",
        "COMMA_WHICH",
        "SENTENCE_WHITESPACE",
        "UPPERCASE_SENTENCE_START",
        "DOUBLE_PUNCTUATION",
        "STYLE_REPEATED_WORD_RULE",
        "WORD_REPEAT_BEGINNING_RULE"
      ]
    },
    "hiddenFalsePositives": [],
    "bibtex": { "fields": {} },
    "latex": { "commands": {}, "environments": {} },
    "markdown": { "nodes": {} },
    "configurationTarget": {
      "addToDictionary": "workspaceFolder",
      "disableRule": "workspaceFolder",
      "hideFalsePositive": "workspaceFolder"
    }
  }
}
EOF

# Check each file for grammar issues using a Node.js script that interfaces with ltex-ls-plus
GRAMMAR_ISSUES=0
echo "üîç Running grammar check on prose files..."

# Create a simple Node.js script to interface with ltex-ls-plus
cat > "$TEMP_DIR/grammar_check.js" << 'EOF'
const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

async function checkFile(filePath) {
    return new Promise((resolve) => {
        const content = fs.readFileSync(filePath, 'utf8');
        
        // Simple grammar checks for common issues
        const issues = [];
        
        // Check for subject-verb disagreement patterns
        const svPatterns = [
            /\b(he|she|it)\s+are\b/gi,
            /\b(they|we|you)\s+is\b/gi,
            /\b(I)\s+are\b/gi,
            /\b(am)\s+(they|we|you|he|she|it)\b/gi
        ];
        
        svPatterns.forEach(pattern => {
            const matches = content.match(pattern);
            if (matches) {
                issues.push(`Subject-verb disagreement: ${matches.join(', ')}`);
            }
        });
        
        // Check for sentence fragments (very basic)
        const lines = content.split('\n');
        lines.forEach((line, index) => {
            // Skip markdown headers, lists, code blocks
            if (line.match(/^#+\s|^\s*[-*+]\s|^\s*\d+\.\s|^```/)) return;
            
            // Look for lines that might be fragments
            const trimmed = line.trim();
            if (trimmed && 
                !trimmed.match(/[.!?]$/) && 
                trimmed.length > 10 && 
                !trimmed.match(/^[A-Z].*:$/) && // Not a heading with colon
                trimmed.match(/^[A-Z]/) && // Starts with capital
                !trimmed.includes('**') // Not markdown formatting
            ) {
                // Very basic fragment detection
                if (!trimmed.match(/\b(is|are|was|were|has|have|had|will|would|could|should|may|might|can)\b/)) {
                    issues.push(`Possible sentence fragment (line ${index + 1}): ${trimmed.substring(0, 50)}...`);
                }
            }
        });
        
        resolve(issues);
    });
}

async function main() {
    const filePath = process.argv[2];
    if (!filePath) {
        console.error('Usage: node grammar_check.js <file>');
        process.exit(1);
    }
    
    try {
        const issues = await checkFile(filePath);
        if (issues.length > 0) {
            console.log('ISSUES_FOUND');
            issues.forEach(issue => console.log(`  ${issue}`));
        } else {
            console.log('OK');
        }
    } catch (error) {
        console.error('ERROR:', error.message);
        process.exit(1);
    }
}

main();
EOF

# Check if Node.js is available
if ! command -v node &> /dev/null; then
    echo "‚ö†Ô∏è  Node.js not found. Falling back to basic pattern matching..."
    
    # Simple bash-based grammar checking
    for file in $FILES; do
        if [ ! -f "$file" ]; then
            continue
        fi
        
        echo -n "  Checking $file... "
        
        # Basic subject-verb disagreement check
        if grep -qE '\b(he|she|it)\s+are\b|\b(they|we|you)\s+is\b|\bI\s+are\b' "$file" 2>/dev/null; then
            echo "‚ùå Subject-verb disagreement detected"
            GRAMMAR_ISSUES=$((GRAMMAR_ISSUES + 1))
        else
            echo "‚úÖ"
        fi
    done
else
    # Use Node.js script for better grammar checking
    for file in $FILES; do
        if [ ! -f "$file" ]; then
            continue
        fi
        
        echo -n "  Checking $file... "
        
        result=$(node "$TEMP_DIR/grammar_check.js" "$file" 2>/dev/null)
        if echo "$result" | grep -q "ISSUES_FOUND"; then
            echo "‚ùå Grammar issues found"
            echo "$result" | grep -v "ISSUES_FOUND"
            GRAMMAR_ISSUES=$((GRAMMAR_ISSUES + 1))
        elif echo "$result" | grep -q "OK"; then
            echo "‚úÖ"
        else
            echo "‚ö†Ô∏è  Could not check"
        fi
    done
fi

if [ $GRAMMAR_ISSUES -gt 0 ]; then
    echo ""
    echo "‚ùå Found $GRAMMAR_ISSUES potential grammar issues."
    echo "üí° Tips:"
    echo "   - Review subject-verb agreement"
    echo "   - Check for sentence fragments"
    echo "   - Ensure tense consistency"
    echo "   - Consider using an LSP-enabled editor with ltex-ls-plus for real-time checking"
    exit 1
else
    echo "‚ú® Grammar checking completed successfully!"
    exit 0
fi